


# Game System Vars -
GLOBAL:VAR|Save.Fortitude		EXPLANATION:D20 System - Sets the "Saving Throw" total value for "Fortitude"
GLOBAL:VAR|Save.Reflex			EXPLANATION:D20 System - Sets the "Saving Throw" total value for "Reflex"
GLOBAL:VAR|Save.Will			EXPLANATION:D20 System - Sets the "Saving Throw" total value for "Will"

GLOBAL:VAR|Save.Fortitude.Base	EXPLANATION:D20 System - Sets the "Saving Throw" value for "Fortitude" as a Base value - this is from Classes
GLOBAL:VAR|Save.Reflex.Base		EXPLANATION:D20 System - Sets the "Saving Throw" value for "Reflex" as a Base value - this is from Classes
GLOBAL:VAR|Save.Will.Base		EXPLANATION:D20 System - Sets the "Saving Throw" value for "Will" as a Base value - this is from Classes

GLOBAL:VAR|Save.Fortitude.Stat	EXPLANATION:D20 System - Sets the "Saving Throw" value for "Fortitude" from the designated Stat
GLOBAL:VAR|Save.Reflex.Stat		EXPLANATION:D20 System - Sets the "Saving Throw" value for "Reflex" from the designated Stat
GLOBAL:VAR|Save.Will.Stat		EXPLANATION:D20 System - Sets the "Saving Throw" value for "Will" from the designated Stat

# Attributes
LOCAL:STAT|Value						EXPLANATION:D20 System - Sets the Value of a given "Stat"
LOCAL:STAT|Mod						EXPLANATION:D20 System - Sets the Mod'ifier' of a given "Stat"

#
GLOBAL:VAR|STRSCORE
GLOBAL:VAR|STR
GLOBAL:VAR|LOADSCORE

GLOBAL:VAR|DEXSCORE
GLOBAL:VAR|DEX

GLOBAL:VAR|CONSCORE
GLOBAL:VAR|CON

GLOBAL:VAR|INTSCORE
GLOBAL:VAR|INT

GLOBAL:VAR|WISSCORE
GLOBAL:VAR|WIS

GLOBAL:VAR|CHASCORE
GLOBAL:VAR|CHA


# RUles
GLOBAL:RULE|DAMAGE_VW
GLOBAL:RULE|USE_CMB

GLOBAL:HP|WoundPoints
GLOBAL:HP|HP
GLOBAL:HP|AltHP


FLAG|Tall		EXPLANATION:Set T/F whether a Race is TALL or not (not = long) - SIZE dictates BASE value for REACH and FACE, 

# Class Specific Local
LOCAL:CLASS|SkillPool		EXPLANATION:???




LOCAL:CLASS|Cast.0		EXPLANATION: *(see below)
LOCAL:CLASS|Cast.1		EXPLANATION: *(see below)
LOCAL:CLASS|Cast.2		EXPLANATION: *(see below)
LOCAL:CLASS|Cast.3		EXPLANATION: *(see below)
LOCAL:CLASS|Cast.4		EXPLANATION: *(see below)
LOCAL:CLASS|Cast.5		EXPLANATION: *(see below)
LOCAL:CLASS|Cast.6		EXPLANATION: *(see below)
LOCAL:CLASS|Cast.7		EXPLANATION: *(see below)
LOCAL:CLASS|Cast.8		EXPLANATION: *(see below)
LOCAL:CLASS|Cast.9		EXPLANATION: *(see below)



#BONUS:SPELLCASTMULT|CLASS=Wizard;LEVEL=1|2
#becomes:
#MODIFYOTHER:CLASS|Wizard|Cast.1|MULTIPLY|2|PRIORITY=500


#CLASS:Fighter <> MODIFY:Bravery|MAX|classlevel()
#CLASS:SomeOtherClass <> MODIFY:Bravery|MAX|classlevel()



# Class Level Trackers
GLOBAL:VAR|Class.BarbarianLVL		EXPLANATION:Captures the level of Class 'Barbarian'		
GLOBAL:VAR|Class.ClericLVL		EXPLANATION:Captures the level of Class 'Cleric'		
GLOBAL:VAR|Class.FighterLVL		EXPLANATION:Captures the level of Class 'Fighter'		
GLOBAL:VAR|Class.MonkLVL		EXPLANATION:Captures the level of Class 'Monk'		
GLOBAL:VAR|Class.WizardLVL		EXPLANATION:Captures the level of Class 'Wizard'		

# Class Extras
CLASS:VAR|Class.MaxLevel		EXPLANATION:This sets the Maximum Level on the Class - this is a local var and may be used on each class to have a Maxmimum defined level. CONVERSION NOTE: This should replace 'MAXLEVEL' see discussion below:
# Tom Discussion:  MAXLEVEL can be a local var to each class, thats a tag we can remove
# [20:49] Tom Parker: maybe
# [20:49] Tom Parker: the code needs to know about it today though
# [20:49] Andrew: it controls the maxlevel of any given class, can be replaced with a PREBOOL
# [20:50] Tom Parker: maybe
# [20:50] Tom Parker: The one thing we're going to have to watch out for is usability
# [20:50] Tom Parker: right now it produces an error message about max levels being reached
# [20:50] Tom Parker: with PREBOOL it would say not qualified, a more general error
# [20:50] Andrew: I wouldn't know, never maxed out before. 
# [20:50] Tom Parker: so PREBOOL may need an explanation or some such attached to it somehow
# [20:52] Andrew: hm
# [20:52] Tom Parker: The problem there becomes translation
# [20:52] Andrew: newtag to display a message then, so we avoid those for now.
# [20:52] Tom Parker: we don't want it to be on PREBOOL itself
# [20:53] Tom Parker: more like PREBOOL:REASON1|...formula...
# [20:53] Tom Parker: and then REASON1 is the index of some sort to get the actual string
# [20:53] Andrew: Ah, that sounds good
# [20:53] Tom Parker: that's more of an i18n question that we will want to solve consistently with that plan
# [20:54] Andrew: i18n - yeah


# Cleric Items
GLOBAL:VAR|DomainLVL			EXPLANATION:Determines the Level of domain powers		
GLOBAL:VAR|ClericDomainCount		EXPLANATION:Determines how many Domains a Cleric may have				
GLOBAL:VAR|Domain				EXPLANATION:PLACEHOLDER - Domain was BONUS:DOMAIN|NUMBER|x		

GLOBAL:OS|TwoHandDamageDivisor
GLOBAL:OS|OffHandLightBonus


#Vars File:
GLOBAL:VAR|BaseAB				EXPLANATION:D20 System - Sets the "Base Attack Bonus" value for character.
GLOBAL:VAR|BaseAB.Step			EXPLANATION:D20 System - Sets the "Base Attack Bonus" step - a Step is the interval between the first attack and each proceeding attack. This is called an attack iteration. Most classes are limited to 4 attacks in total, except the monk which gets 7 unarmed strikes.

EQUIPMENT.PART:VAR|AB.1			EXPLANATION:Sets the AB (AttackBonus) for the 1st attack
EQUIPMENT.PART:VAR|AB.2			EXPLANATION:Sets the AB (AttackBonus) for the 2nd attack
EQUIPMENT.PART:VAR|AB.3			EXPLANATION:Sets the AB (AttackBonus) for the 3rd attack
EQUIPMENT.PART:VAR|AB.4			EXPLANATION:Sets the AB (AttackBonus) for the 4th attack
EQUIPMENT.PART:VAR|AB.5			EXPLANATION:Sets the AB (AttackBonus) for the 5th attack
EQUIPMENT.PART:VAR|AB.6			EXPLANATION:Sets the AB (AttackBonus) for the 6th attack
EQUIPMENT.PART:VAR|AB.7			EXPLANATION:Sets the AB (AttackBonus) for the 7th attack

EQUIPMENT.PART:ToHit.ModTotal		EXPLANATION:Sets the ToHit.ModTotal

EQUIPMENT.PART:VAR|ToHit.1		EXPLANATION:Sets the ToHit for attack 1	
EQUIPMENT.PART:VAR|ToHit.2		EXPLANATION:Sets the ToHit for attack 2	
EQUIPMENT.PART:VAR|ToHit.3		EXPLANATION:Sets the ToHit for attack 3	
EQUIPMENT.PART:VAR|ToHit.4		EXPLANATION:Sets the ToHit for attack 4	
EQUIPMENT.PART:VAR|ToHit.5		EXPLANATION:Sets the ToHit for attack 5	
EQUIPMENT.PART:VAR|ToHit.6		EXPLANATION:Sets the ToHit for attack 6  //For Flurry of Blows [PF]
EQUIPMENT.PART:VAR|ToHit.7		EXPLANATION:Sets the ToHit for attack 7  //For Flurry of Blows [PF]
EQUIPMENT.PART:VAR|ToHit.8		EXPLANATION:Sets the ToHit for attack 8  //For Haste/Speed
EQUIPMENT.PART:VAR|ToHit.9		EXPLANATION:Sets the ToHit for attack 9  //For Spear Wind
EQUIPMENT.PART:VAR|ToHit.10		EXPLANATION:Sets the ToHit for attack 10 //For Eclipse
EQUIPMENT.PART:VAR|ToHit.11		EXPLANATION:Sets the ToHit for attack 11 //For Eclipse (Haste/Speed/Spear Wind)
EQUIPMENT.PART:VAR|ToHit.12		EXPLANATION:Sets the ToHit for attack 12 //For Eclipse (Haste/Speed/Spear Wind)


# Global Variable File:
FLAG|FighterWeaponMastery		EXPLANATION:Sets 'Flag' called 'FighterWeaponMastery'
FLAG|RacialVision				EXPLANATION:Sets 'Flag' (Boolean) called 'RacialVision'

# Class Archetype Flags
# Barbarian
FLAG|BarbarianRage
FLAG|BarbarianFastMovement
FLAG|BarbarianRagePowers
FLAG|BarbarianTrapSense
FLAG|BarbarianDamageReduction
FLAG|BarbarianGreaterRage
FLAG|BarbarianIndomitableWill
FLAG|BarbarianTirelessRage
FLAG|BarbarianMightyRage

# Cleric
FLAG|ClericClassSkills	
FLAG|ClericChannelEnergy
FLAG|ClericOrisons
FLAG|ClericSpontaneousCasting

# Fighter
FLAG|FighterClassSkills	
FLAG|FighterProficiencies
FLAG|FighterWeaponProficiencies
FLAG|FighterHeavyArmorProficiency
FLAG|FighterMediumArmorProficiency
FLAG|FighterLightArmorProficiency
FLAG|FighterShieldProficiency
FLAG|FighterTowerShieldProficiency
FLAG|FighterBonusFeats
FLAG|FighterBravery
FLAG|FighterArmorTraining_ALL
FLAG|FighterWeaponTraining_ALL
FLAG|FighterArmorMastery


# Monk
FLAG|MonkFlurryOfBlows
FLAG|MonkBonusFeats					
FLAG|MonkACBonus							
FLAG|MonkStunningFist					
FLAG|MonkEvasion							
FLAG|MonkFastMovement					
FLAG|MonkManeuverTraining			
FLAG|MonkStillMind					
FLAG|MonkKiPool							
FLAG|MonkSlowFall						
FLAG|MonkHighJump						
FLAG|MonkPurityOfBody					
FLAG|MonkWholenessOfBody			
FLAG|MonkImprovedEvasion			
FLAG|MonkDiamondBody					
FLAG|MonkAbundantStep					
FLAG|MonkDiamondSoul
FLAG|MonkQuiveringPalm	
FLAG|MonkTongueOfTheSunAndMoon
FLAG|MonkTimelessBody
FLAG|MonkEmptyBody
FLAG|MonkPerfectSelf

# Wizard
FLAG|WizardClassSkills
FLAG|WizardArcaneSchool
FLAG|WizardWeaponProficiencies
FLAG|WizardWeaponProficiencies
FLAG|WizardScribeScroll
FLAG|WizardArcaneBond
FLAG|WizardCantrips
FLAG|WizardBonusFeats



# MODIFYOTHER:ABILITY=Archetype|GROUP=FighterWeaponMastery|FighterWeaponMastery|SET|True
# Global set to one if the flag is turned on
# MODIFY:ABILITYPOOL=Weapon Mastery|SET|if(context("FLAG",FighterWeaponMastery),1,0)



ABILITYPOOL|Weapon Mastery		EXPLANATION:Sets up ABILITYPOOL "Weapon Mastery"
#In effect the following puts the flag on all Abilities of the given Group
# Other items could set the flag individually even if they are not an Archetype


#################
# Note that this method of having separate SETs on each object is probably preferable to calling a count() function as you showed... it will resolve a lot faster, since it will deterministically know the SET had no effect on the results if it's already True.  A count() would have to be checked each time to see if new Abilities were added to the PC, so it will be a lot slower.
# I'd note as well that the FLAG concept then can replace a lot of your variables that you change from 0 to 1 and use a TYPE= controlled bonus to ensure that multiple grants can't ever make it more than one (in case you need to decrement it back to zero).  You're hacking integers to do a Boolean function and the new system allows you to really, truly, use a Boolean because that is what you are really doing... and just have a higher priority if you need to force it back to FALSE.
# Power and clarity... good things.
#####################



#On PRExxx:

#PREBOOL:context("AREA",Face==5,5)


#context drops into "AREA" and then you run a Boolean comparison for Face equaling 5,5... if the Boolean returns TRUE the PRExxx passes, if not, then not.
#This can then capture ANYTHING in the formula environment just by writing it as a Boolean formula... and with functions like count() and others that will undoubtedly be created, you may find yourself liking to use PREBOOL rather than other PRExxx

# Equipment:
EQUIPMENT.PART:CritMult			EXPLANATION:Sets up Equipment to have "CritMult" which sets a Critical Multiplier value for each part of the equipment (FORMAT: #/xY, with Y the value). (In d20, a weapon may have Two "Heads" and have unique values for either head.
EQUIPMENT.PART:CritRange		EXPLANATION:Sets up Equipment to have "CritRange" which sets a Critical Range value for each part of the equipment (FORMAT: Y/x#, with Y being a 20, 19-20, 18-20, etc.) (In d20, a weapon may have Two "Heads" and have unique values for either head.
EQUIPMENT:WT				EXPLANATION:Equipment may only have one Weight, abbreviated "WT" for fast use.
EQUIPMENT:COST				EXPLANATION:Equipment may have one Cost or "Price".



